hp2xx.c:	po->dpi_x);
hp2xx.c:  Eprintf ("-D int    %d\t\tDPI value for y ONLY\n", po->dpi_x);
hp2xx.c:  Eprintf ("-i         %s\tPre-initialize printer\n", FLAGSTATE (po->init_p));
hp2xx.c:  Eprintf ("-F         %s\tSend a FormFeed at end\n", FLAGSTATE(po->formfeed));
hp2xx.c:	po->specials);
hp2xx.c:	po->specials);
hp2xx.c:		po->vga_mode);
hp2xx.c:  po->init_p	= FALSE;
hp2xx.c:  po->formfeed	= FALSE;
hp2xx.c:  po->specials	= 0;
hp2xx.c:  po->dpi_x	= 75;
hp2xx.c:  po->dpi_y	= 0;
hp2xx.c:  po->vga_mode	= 18;		/* 0x12: VGA 640x480, 16 colors */
hp2xx.c:  po->picbuf	= NULL;
hp2xx.c:  po->outfile	= "";
hp2xx.c:  if (po != NULL && po->picbuf != NULL)
hp2xx.c:	free_PicBuf (po->picbuf);
hp2xx.c:	po->picbuf = NULL;
hp2xx.c:  if ((po->picbuf = allocate_PicBuf (pg, n_rows, n_cols)) == NULL)
hp2xx.c:  if (po->picbuf == NULL)
hpgl.c:  dot_ratio = (double) po->dpi_y / (double) po->dpi_x;
hpgl.c:  po->width = pi->width;
hpgl.c:  po->height = pi->height;
hpgl.c:  po->xoff = pi->xoff;
hpgl.c:  po->yoff = pi->yoff;
hpgl.c:      po->width = Dx / 40.0;	/* Ignore -w, take natural HP-GL range  */
hpgl.c:      po->height = Dy / 40.0;	/* Ignore -h, take natural HP-GL range  */
hpgl.c:      po->HP_to_xdots = (float) (po->dpi_x / 1016.0);	/* dots per HP unit */
hpgl.c:      po->HP_to_ydots = (float) (po->dpi_y / 1016.0);	/*  (1/40 mm)       */
hpgl.c:	  fprintf (stderr, "po->width ?<? tmp_w: %f %f\n", po->width, tmp_w);
hpgl.c:	  fprintf (stderr, "po->height ?<? tmp_h: %f %f\n", po->height,
hpgl.c:	  if (po->width < tmp_w)
hpgl.c:	    po->xoff += (tmp_w - po->width) / 2.0;
hpgl.c:	  if (po->height < tmp_h)
hpgl.c:	    po->yoff += (tmp_h - po->height) / 2.0;
hpgl.c:/*    if (po->width > tmp_w) */
hpgl.c:	  po->HP_to_ydots = (float) (po->dpi_y * po->height) / Dy / 25.4;
hpgl.c:	  po->HP_to_xdots = po->HP_to_ydots * pi->aspectfactor / dot_ratio;
hpgl.c:	    po->xoff += (po->width - tmp_w) / 2.0;	/* by L. Lowe   */
hpgl.c:	  po->width = tmp_w;
hpgl.c:	  po->HP_to_xdots = (float) (po->dpi_x * po->width) / Dx / 25.4;
hpgl.c:	  po->HP_to_ydots = po->HP_to_xdots * dot_ratio / pi->aspectfactor;
hpgl.c:	    po->yoff += (po->height - tmp_h) / 2.0;	/* by L. Lowe   */
hpgl.c:	  po->height = tmp_h;
hpgl.c:	       po->width, po->height, dir_str);
hpgl.c:  po->xmin = xmin;
hpgl.c:  po->xmax = xmax;
hpgl.c:  po->ymin = ymin;
hpgl.c:  po->ymax = ymax;
picbuf.c:  DevP->x = (int) ((HP_P->x - po->xmin) * po->HP_to_xdots);
picbuf.c:  DevP->y = (int) ((HP_P->y - po->ymin) * po->HP_to_ydots);
picbuf.c:  HP_Pt.x  = po->xmax;
picbuf.c:  HP_Pt.y  = po->ymax;
picbuf.c: /* maxps= (int)(1. + pg->maxpensize *po->HP_to_xdots/0.025); */
picbuf.c:   maxps = ceil(pg->maxpensize *po->HP_to_xdots/0.025); 
picbuf.c:			ceil(pt.width[pen_no]*po->HP_to_xdots/0.025), 
picbuf.c:			po->picbuf);
picbuf.c:			ceil(pt.width[pen_no]*po->HP_to_xdots/0.025), 
picbuf.c:			po->picbuf);
std_main.c:strcpy(savedname,po->outfile);
std_main.c:  strcpy(po->outfile,"");
std_main.c:	po->pagecount++;
std_main.c:	if (po->outfile != "-" && po->pagecount >0) {
std_main.c:	sprintf(thepage,"%d",po->pagecount);
std_main.c:	strcpy(po->outfile,savedname);
std_main.c:	strcpy(strstr(po->outfile,pg->mode),thepage);
std_main.c:	strcat(po->outfile,".");
std_main.c:	strcat(po->outfile,pg->mode);
std_main.c:		switch (po->dpi_x = atoi (optarg))
std_main.c:				po->specials == 0)
std_main.c:				po->dpi_x);
std_main.c:		po->dpi_y = atoi (optarg);
std_main.c:		if ((!pg->quiet) && strcmp(pg->mode,"pcl")==0 && po->specials==0)
std_main.c:		po->formfeed = TRUE;
std_main.c:		po->outfile = optarg;
std_main.c:		po->init_p = TRUE;
std_main.c:		po->specials = atoi (optarg);
std_main.c:		po->vga_mode = atoi (optarg);
to_amiga.c:    pb = po->picbuf;
to_amiga.c:    xoff = po->xoff * po->dpi_x / 25.4;
to_amiga.c:    yoff = po->yoff * po->dpi_y / 25.4;
to_atari.c:      preview (po->picbuf, pg->quiet);	/* Previewer aufrufen   */
to_dj_gr.c:  pb = po->picbuf;
to_dj_gr.c:  xoff = po->xoff * po->dpi_x / 25.4;
to_dj_gr.c:  yoff = po->yoff * po->dpi_y / 25.4;
to_emf.c:	low=(int)(po->ymin/40-MARGIN);
to_emf.c:	high=(int)(po->ymax+MARGIN);
to_emf.c:	high=(long)((po->ymin/40+po->height));
to_emf.c:	left=(int)((po->xmin/40-MARGIN));
to_emf.c:	right=(int)po->xmax+MARGIN;
to_emf.c:	right=(long)((po->xmin/40+po->width));
to_emf.c:	low=(int)(po->ymin-MARGIN);
to_emf.c:	high=(int)(po->ymax+MARGIN);
to_emf.c:	left=(int)po->xmin-MARGIN;
to_emf.c:	right=(int)po->xmax+MARGIN;
to_emf.c:	if(fabs(po->xmax-po->xmin)<fabs(po->ymax-po->ymin))
to_emf.c:		*po->outfile == '-' ? "stdout" : po->outfile);
to_emf.c:	if (*po->outfile != '-')
to_emf.c:		if ((outDC=CreateEnhMetaFile(NULL,po->outfile,NULL,"hp2xx\0\0"))==0){
to_eps.c:   fprintf(fd, "%%%%Title: %s\n", po->outfile);
to_eps.c:   left = (long) floor(abs(po->xoff - hmxpenw) * MM_TO_PS_POINT);
to_eps.c:   low = (long) floor(abs(po->yoff - hmxpenw) * MM_TO_PS_POINT);
to_eps.c:   right = (long) ceil((po->xoff + po->width + hmxpenw) * MM_TO_PS_POINT);
to_eps.c:   high = (long) ceil((po->yoff + po->height + hmxpenw) * MM_TO_PS_POINT);
to_eps.c:   fprintf(fd, "    %7.3f %7.3f translate\n", po->xoff + hmxpenw,
to_eps.c:           po->yoff + hmxpenw);
to_eps.c:              *po->outfile == '-' ? "stdout" : po->outfile);
to_eps.c:   if (*po->outfile != '-') {
to_eps.c:      if ((md = fopen(po->outfile, "w")) == NULL) {
to_eps.c:   xcoord2mm = po->width / (po->xmax - po->xmin);
to_eps.c:   ycoord2mm = po->height / (po->ymax - po->ymin);
to_eps.c:   xmin = po->xmin;
to_eps.c:   ymin = po->ymin;
to_escp2.c: if ((po->width >= po->height && (po->width > 297. || po->height >210.)) || 
to_escp2.c:    (po->width < po->height && (po->height >297. || po->width >210.))) 
to_escp2.c: if ((po->width >= po->height && (po->width > 420. || po->height >297.)) || 
to_escp2.c:    (po->width < po->height && (po->height >420. || po->width >297.))) 
to_escp2.c: if ((po->width >= po->height && (po->width > 584. || po->height >420.)) || 
to_escp2.c:    (po->width < po->height && (po->height >584. || po->width >420.))) 
to_escp2.c: if ((po->width >= po->height && (po->width > 820. || po->height >584.)) || 
to_escp2.c:    (po->width < po->height && (po->height >820. || po->width >584.))) 
to_escp2.c:	size=3600/po->dpi_y;
to_escp2.c:             size = po->dpi_y * po->height ;
to_escp2.c:    size = po->dpi_y * (po->height- 10) *.003937;
to_escp2.c:          size = po->dpi_y * (po->height - 10) * .003937;
to_escp2.c:            size = po->dpi_y * (po->height - 10) *.003937;
to_escp2.c:  if (po->picbuf->depth > 1 && po->specials < 3)
to_escp2.c:  Deskjet_specials = (po->specials != 0) ? TRUE : FALSE;
to_escp2.c:  if (po->picbuf->depth > 1)
to_escp2.c:	p_K = calloc (po->picbuf->nb, sizeof(Byte));
to_escp2.c:	p_C = calloc (po->picbuf->nb, sizeof(Byte));
to_escp2.c:	p_M = calloc (po->picbuf->nb, sizeof(Byte));
to_escp2.c:	p_Y = calloc (po->picbuf->nb, sizeof(Byte));
to_escp2.c:  p_B = calloc (po->picbuf->nb + n_B, sizeof(Byte));
to_escp2.c:  if (*po->outfile != '-')
to_escp2.c:	if ((fd = fopen(po->outfile, WRITE_BIN, "rfm=var","mrs=512")) == NULL)
to_escp2.c:	if ((fd = fopen(po->outfile, WRITE_BIN)) == NULL)
to_escp2.c:			width=8*po->picbuf->nb; /*line width in pixels*/
to_escp2.c:  for (row_c = po->picbuf->nr - 1; row_c >= 0; row_c--)
to_escp2.c:	row = get_RowBuf(po->picbuf, row_c);
to_escp2.c:	if (po->picbuf->depth == 1){
to_escp2.c:		Buf_to_ESCP2 (row->buf, po->picbuf->nb, ESCP2_FIRST | ESCP2_LAST, fd);
to_escp2.c:		for (x=0; x < po->picbuf->nb; x++)
to_escp2.c:		for (x=offset=0; x < (po->picbuf->nb << 3); x++, offset = (x >> 3))
to_escp2.c:			color_index = index_from_RowBuf(row, x, po->picbuf);
to_escp2.c:/*		switch (po->specials)
to_escp2.c:			K_to_CMY (po->picbuf->nb);
to_escp2.c:/*fprintf(stderr,"calculated width %d pixels, nb is %d (%d)\n",width,po->picbuf->nb,8*po->picbuf->nb);
to_escp2.c:			KCMY_Buf_to_ESCP2 (po->picbuf->nb, (po->specials == 4),width, fd);
to_escp2.c:			KCMY_to_K (po->picbuf->nb);
to_escp2.c:			Buf_to_ESCP2 (p_K, po->picbuf->nb, ESCP2_FIRST | ESCP2_LAST, fd);
to_escp2.c:/*  if (po->formfeed)
to_fig.c:  if (*po->outfile != '-')
to_fig.c:	if ((md = fopen(po->outfile, "w")) == NULL)
to_fig.c:		*po->outfile == '-' ? "stdout" : po->outfile);
to_fig.c:	xcoord2mm = (1200.0 / 25.4) * po->width  / (po->xmax - po->xmin);
to_fig.c:	ycoord2mm = (1200.0 / 25.4) * po->height / ( po->ymax - po->ymin);
to_fig.c:			  x[0] = (int)((pt1.x - po->xmin) * xcoord2mm);
to_fig.c:			  y[0] = (int)((po->ymax - pt1.y) * ycoord2mm);
to_fig.c:		x[npoints] = (int)((pt1.x - po->xmin) * xcoord2mm);
to_fig.c:		y[npoints] = (int)((po->ymax - pt1.y) * ycoord2mm);
to_fig.c:		x[0] = (int)((pt1.x - po->xmin) * xcoord2mm);
to_fig.c:		y[0] = (int)((po->ymax - pt1.y) * ycoord2mm);
to_hgc.c:  pb   = po->picbuf;
to_hgc.c:  xoff = po->xoff * po->dpi_x / 25.4;
to_hgc.c:  yoff = po->yoff * po->dpi_y / 25.4;
to_ilbm.c:    pb = po->picbuf;
to_ilbm.c:	Eprintf ("\nWriting ILBM output: %s\n",po->outfile);
to_ilbm.c:    if (*po->outfile != '-') {
to_ilbm.c:	if ((fd = fopen(po->outfile, WRITE_BIN, "rfm=var", "mrs=512")) == NULL) {
to_ilbm.c:	if ((fd = fopen(po->outfile, WRITE_BIN)) == NULL) {
to_img.c:    int     Img_w = po->picbuf->nb; /* bytes per row            */
to_img.c:    int     Img_h = po->picbuf->nr; /* number of lines          */
to_img.c:    int     Dpi_x = po->dpi_x;      /* dots per inch            */
to_img.c:    int     Dpi_y = po->dpi_y;
to_img.c:    pbuf = po->picbuf;
to_img.c:		*po->outfile == '-' ? "<stdout>" : po->outfile);
to_img.c:    if (*po->outfile != '-')
to_img.c:	if ((fd = fopen(po->outfile, WRITE_BIN, "rfm=var","mrs=512")) == NULL)
to_img.c:	if ((fd = fopen(po->outfile, WRITE_BIN)) == NULL)
to_jpg.c:  W=po->picbuf->nr;
to_jpg.c:  H=po->picbuf->nc;
to_jpg.c:  D=po->picbuf->depth;
to_jpg.c:  B=po->picbuf->nb;
to_jpg.c:  if (*po->outfile != '-') {    
to_jpg.c:     if ((w=fopen(po->outfile,"wb"))==NULL){
to_jpg.c:     switch(po->specials) {
to_jpg.c:  S=3*po->picbuf->nc;
to_jpg.c:  if(D==1)S=po->picbuf->nc; 
to_jpg.c:    if (*po->outfile != '-' ) fclose(w);
to_jpg.c:    if ((row=get_RowBuf(po->picbuf, (W-1)-y))==NULL)
to_jpg.c:      Byte C=index_from_RowBuf(row, x, po->picbuf);
to_jpg.c:  if (*po->outfile != '-') fclose(w);
to_os2.c:  pb = po->picbuf;
to_os2.c:  xoff = po->xoff * po->dpi_x / 25.4;
to_os2.c:  yoff = po->yoff * po->dpi_y / 25.4;
to_pac.c:  pb = po->picbuf;
to_pac.c:  if (*po->outfile != '-')
to_pac.c:	strncpy (basename, po->outfile, 6);
to_pbm.c:  pb = po->picbuf;
to_pbm.c:	Eprintf("\nWriting PBM output: %s\n", po->outfile);
to_pbm.c:  if (*po->outfile != '-')
to_pbm.c:	if ((fd = fopen(po->outfile, WRITE_BIN, "rfm=var", "mrs=512")) == NULL)
to_pbm.c:	if ((fd = fopen(po->outfile, WRITE_BIN)) == NULL)
to_pcl.c: if ((po->width >= po->height && (po->width > 297. || po->height >210.)) || 
to_pcl.c:    (po->width < po->height && (po->height >297. || po->width >210.))) 
to_pcl.c: if ((po->width >= po->height && (po->width > 420. || po->height >297.)) || 
to_pcl.c:    (po->width < po->height && (po->height >420. || po->width >297.))) 
to_pcl.c: if ((po->width >= po->height && (po->width > 584. || po->height >420.)) || 
to_pcl.c:    (po->width < po->height && (po->height >584. || po->width >420.))) 
to_pcl.c: if ((po->width >= po->height && (po->width > 820. || po->height >584.)) || 
to_pcl.c:    (po->width < po->height && (po->height >820. || po->width >584.))) 
to_pcl.c:  if (po->yoff != 0.0)
to_pcl.c:	fprintf(fd,"\033&a+%dV",(int)(po->yoff * 720.0 / 25.4) );
to_pcl.c:  if (po->xoff != 0.0)
to_pcl.c:	fprintf(fd,"\033&a+%dH",(int)(po->xoff * 720.0 / 25.4) );
to_pcl.c:  fprintf(fd,"\033*t%dR", po->dpi_x);
to_pcl.c:  if (po->specials)
to_pcl.c:	fprintf(fd,"\033*r%dS", po->picbuf->nc);
to_pcl.c:	switch (po->specials)
to_pcl.c:  if (po->picbuf->depth > 1 && po->specials < 3)
to_pcl.c:  Deskjet_specials = (po->specials != 0) ? TRUE : FALSE;
to_pcl.c:  if (po->picbuf->depth > 1)
to_pcl.c:	p_K = calloc (po->picbuf->nb, sizeof(Byte));
to_pcl.c:	p_C = calloc (po->picbuf->nb, sizeof(Byte));
to_pcl.c:	p_M = calloc (po->picbuf->nb, sizeof(Byte));
to_pcl.c:	p_Y = calloc (po->picbuf->nb, sizeof(Byte));
to_pcl.c:  p_B = calloc (po->picbuf->nb + n_B, sizeof(Byte));
to_pcl.c:  if (*po->outfile != '-')
to_pcl.c:	if ((fd = fopen(po->outfile, WRITE_BIN, "rfm=var","mrs=512")) == NULL)
to_pcl.c:	if ((fd = fopen(po->outfile, WRITE_BIN)) == NULL)
to_pcl.c:  if (po->init_p)
to_pcl.c:  for (row_c = po->picbuf->nr - 1; row_c >= 0; row_c--)
to_pcl.c:	row = get_RowBuf(po->picbuf, row_c);
to_pcl.c:	if (po->picbuf->depth == 1)
to_pcl.c:		Buf_to_PCL (row->buf, po->picbuf->nb, PCL_FIRST | PCL_LAST, fd);
to_pcl.c:		for (x=0; x < po->picbuf->nb; x++)
to_pcl.c:		for (x=offset=0; x < (po->picbuf->nb << 3); x++, offset = (x >> 3))
to_pcl.c:			color_index = index_from_RowBuf(row, x, po->picbuf);
to_pcl.c:		switch (po->specials)
to_pcl.c:			K_to_CMY (po->picbuf->nb);
to_pcl.c:			KCMY_Buf_to_PCL (po->picbuf->nb, (po->specials == 4), fd);
to_pcl.c:			KCMY_to_K (po->picbuf->nb);
to_pcl.c:			Buf_to_PCL (p_K, po->picbuf->nb, PCL_FIRST | PCL_LAST, fd);
to_pcl.c:  if (po->formfeed)
to_pcx.c:if (po->picbuf->depth ==1)
to_pcx.c:if (po->picbuf->depth==1)
to_pcx.c:  h.xmax        = po->picbuf->nc - 1;
to_pcx.c:  h.ymax        = po->picbuf->nr - 1;
to_pcx.c:  h.hres        = po->dpi_x;     /* Resolution                   */
to_pcx.c:  h.vres        = po->dpi_y;
to_pcx.c: if (po->picbuf->depth == 1){
to_pcx.c:/*  h.planes      = po->picbuf->depth; *//* Number of color planes	   */
to_pcx.c:  if (po->picbuf->depth ==1 ){
to_pcx.c:  h.byteperline = po->picbuf->nb;
to_pcx.c:  h.byteperline = 8*po->picbuf->nb;    /* Number of bytes per line   */
to_pcx.c:  h.hscreensize = po->picbuf->nc - 1; /* Horizontal screen size in pixels */
to_pcx.c:  h.vscreensize = po->picbuf->nr - 1; /* Vertical screen size in pixels */
to_pcx.c:  if (*po->outfile != '-')
to_pcx.c:	if ((fd = fopen(po->outfile, WRITE_BIN, "rfm=var","mrs=512")) == NULL)
to_pcx.c:	if ((fd = fopen(po->outfile, WRITE_BIN)) == NULL)
to_pcx.c:  for (row_c = po->picbuf->nr - 1; row_c >= 0; row_c--)
to_pcx.c:	row = get_RowBuf (po->picbuf, row_c);
to_pcx.c:		for (x=0; x < po->picbuf->nb; x++)
to_pcx.c:  if (po->picbuf->depth > 1)
to_pcx.c:	p_I = calloc (po->picbuf->nb, 8*sizeof(Byte));
to_pcx.c:	p_B = calloc (po->picbuf->nb, 8*sizeof(Byte));
to_pcx.c:	p_G = calloc (po->picbuf->nb, 8*sizeof(Byte));
to_pcx.c:	p_R = calloc (po->picbuf->nb, 8*sizeof(Byte));
to_pcx.c:  for (row_c = po->picbuf->nr - 1; row_c >= 0; row_c--)
to_pcx.c:/*fprintf(stderr,"coverting row %d (%d bytes)\n",row_c,po->picbuf->nb);*/
to_pcx.c:	row = get_RowBuf(po->picbuf, row_c);
to_pcx.c:	if (po->picbuf->depth == 1)
to_pcx.c:		Buf_to_PCX (row->buf, po->picbuf->nb, fd);
to_pcx.c:		for (x=0; (x < po->picbuf->nb<<3); x++){
to_pcx.c:   color_index = index_from_RowBuf(row, x, po->picbuf);
to_pcx.c:for (x=0; x < po->picbuf->nb; x++)fprintf(stderr,"%d%d%d\n",p_R[x],p_G[x],p_B[x]);
to_pcx.c:		Buf_to_PCX (p_R, 8*po->picbuf->nb, fd);
to_pcx.c:		Buf_to_PCX (p_G, 8*po->picbuf->nb, fd);
to_pcx.c:		Buf_to_PCX (p_B, 8*po->picbuf->nb, fd);
to_pcx.c:/*		Buf_to_PCX (p_I, 8*po->picbuf->nb, fd);*/
to_pdf.c:   left = (long) floor(abs(po->xoff - hmxpenw) * MM_TO_PS_POINT);
to_pdf.c:   low = (long) floor(abs(po->yoff - hmxpenw) * MM_TO_PS_POINT);
to_pdf.c:   right = (long) ceil((po->xoff + po->width + hmxpenw) * MM_TO_PS_POINT);
to_pdf.c:   high = (long) ceil((po->yoff + po->height + hmxpenw) * MM_TO_PS_POINT);
to_pdf.c:              *po->outfile == '-' ? "stdout" : po->outfile);
to_pdf.c:   if (PDF_open_file(md, po->outfile) == -1) {
to_pdf.c:   xcoord2mm = po->width / (po->xmax - po->xmin) * MM_TO_PS_POINT;
to_pdf.c:   ycoord2mm = po->height / (po->ymax - po->ymin) * MM_TO_PS_POINT;
to_pdf.c:   xmin = po->xmin;
to_pdf.c:   ymin = po->ymin;
to_pic.c:  pb = po->picbuf;
to_pic.c:			(*po->outfile != '-') ? po->outfile : "bitmap",
to_pm.c:  pbuf = po->picbuf;
to_pm.c:  if (win_open( (int)(po->xoff * po->dpi_x / 25.4),
to_pm.c:		(int)(po->yoff * po->dpi_y / 25.4),
to_pm.c:		po->picbuf->nb << 3, po->picbuf->nr ) )
to_png.c:  pb = po->picbuf;
to_png.c:	Eprintf("\nWriting PNG output: %s\n", po->outfile);
to_png.c:  if (*po->outfile != '-')
to_png.c:	if ((fd = fopen(po->outfile, WRITE_BIN, "rfm=var", "mrs=512")) == NULL)
to_png.c:	if ((fd = fopen(po->outfile, WRITE_BIN)) == NULL)
to_rgip.c:	    *po->outfile == '-' ? "stdout" : po->outfile);
to_rgip.c:  if (*po->outfile != '-')
to_rgip.c:    if ((md = fopen(po->outfile, "w")) == NULL)
to_rgip.c:  ax=RGIPXMAX/(po->xmax - po->xmin);
to_rgip.c:  ay=RGIPYMAX/(po->ymax - po->ymin);
to_rgip.c:	startx=rgipx(((&pt1)->x) - po->xmin);
to_rgip.c:	starty=rgipy(((&pt1)->y) - po->ymin);
to_rgip.c:	    endx=rgipx(((&pt1)->x) - po->xmin);
to_rgip.c:	    endy=rgipy(((&pt1)->y) - po->ymin);
to_rgip.c:	  startx=rgipx(((&pt1)->x) - po->xmin);
to_rgip.c:	  starty=rgipy(((&pt1)->y) - po->ymin);
to_sunvw.c:  pb = po->picbuf;
to_sunvw.c:  xoff = po->xoff * po->dpi_x / 25.4;
to_sunvw.c:  yoff = po->yoff * po->dpi_y / 25.4;
to_tif.c:  if (*po->outfile == '-'){
to_tif.c:    if ((w=TIFFOpen(po->outfile,"w"))==NULL){
to_tif.c:  W=po->picbuf->nr;
to_tif.c:  H=po->picbuf->nc;
to_tif.c:  D=po->picbuf->depth;
to_tif.c:  B=po->picbuf->nb;
to_tif.c:  XDPI=po->dpi_x;
to_tif.c:  YDPI=po->dpi_y;
to_tif.c:  switch(po->specials) {
to_tif.c:  if (po->specials > 0)
to_tif.c:    if ((row=get_RowBuf(po->picbuf, (W-1)-y))==NULL)
to_tif.c:      Byte C=index_from_RowBuf(row, x, po->picbuf);
to_tif.c:  if (*po->outfile == '-'){
to_uis.c:  pb = po->picbuf;
to_uis.c:  xoff = po->xoff * po->dpi_x / 25.4;
to_uis.c:  yoff = po->yoff * po->dpi_y / 25.4;
to_uis.c:  w   = (float) po->width / 10.0;	/* VAX needs cm, not mm */
to_uis.c:  h   = (float) po->height/ 10.0;
to_vec.c:  if (*po->outfile != '-')
to_vec.c:		if ((md = fopen(po->outfile, "w")) == NULL)
to_vec.c:			*po->outfile == '-' ? "stdout" : tempch);
to_vec.c:			*po->outfile == '-' ? "stdout" : po->outfile);
to_vec.c:		*po->outfile == '-' ? "stdout" : po->outfile);
to_vec.c:	fprintf(csfile, scale_cmd, po->width, po->height, tempch);
to_vec.c:			ftype, po->outfile);
to_vec.c:		fprintf(md, scale_cmd, po->width, po->height);
to_vec.c:	if (mode == 8 ) fprintf(md, scale_cmd, po->width, po->height);
to_vec.c:	  xcoord2mm = po->width  / (po->xmax - po->xmin);
to_vec.c:	  ycoord2mm = po->height / ( po->ymax - po->ymin);
to_vec.c:    if (mode == 8) pt1.y = po->ymax -pt1.y;
to_vec.c:			(pt1.x - po->xmin) * xcoord2mm,
to_vec.c:			(pt1.y - po->ymin) * ycoord2mm);
to_vec.c:			  (pt1.x - po->xmin) * xcoord2mm,
to_vec.c:			  (pt1.y - po->ymin) * ycoord2mm, np++);
to_vec.c:			  (pt1.x - po->xmin) * xcoord2mm,
to_vec.c:			  (pt1.y - po->ymin) * ycoord2mm, np++);
to_vec.c:			  (old_pt.x - po->xmin) * xcoord2mm,
to_vec.c:			  (old_pt.y - po->ymin) * ycoord2mm, np++);
to_vec.c:    if (mode == 8) pt1.y = po->ymax -pt1.y;
to_vec.c:			  (pt1.x - po->xmin) * xcoord2mm,
to_vec.c:			  (pt1.y - po->ymin) * ycoord2mm);
to_vec.c:			  (pt1.x - po->xmin) * xcoord2mm,
to_vec.c:			  (pt1.y - po->ymin) * ycoord2mm);
to_vec.c:			  (pt1.x - po->xmin) * xcoord2mm,
to_vec.c:			  (pt1.y - po->ymin) * ycoord2mm);
to_vec.c:				(pt1.x - po->xmin) * xcoord2mm,
to_vec.c:				(pt1.y - po->ymin) * ycoord2mm);
to_vec.c:					(pt1.x - po->xmin) * xcoord2mm,
to_vec.c:					(pt1.y - po->ymin) * ycoord2mm,
to_vec.c:					(pt1.x + 1.0 - po->xmin) * xcoord2mm,
to_vec.c:					(pt1.y - po->ymin) * ycoord2mm);
to_vec.c:					(pt1.x - po->xmin) * xcoord2mm,
to_vec.c:					(pt1.y - po->ymin) * ycoord2mm);
to_vga.c:  xoff = po->xoff * po->dpi_x / 25.4;
to_vga.c:  yoff = po->yoff * po->dpi_y / 25.4;
to_vga.c:      (((po->picbuf->nb << 3) + xoff > 639) || (po->picbuf->nr + yoff > 480)) )
to_vga.c:		xoff, (po->picbuf->nb << 3) + xoff, yoff, po->picbuf->nr + yoff);
to_vga.c:  set_VGAmode (po->vga_mode);
to_vga.c:  for (row_c=0, y=po->picbuf->nr+yoff-1; row_c < po->picbuf->nr; row_c++, y--)
to_vga.c:	row = get_RowBuf (po->picbuf, row_c);
to_vga.c:	for (x=0; x < po->picbuf->nc; x++)
to_vga.c:		color_index = index_from_RowBuf(row, x, po->picbuf);
to_x11.c:  pb = po->picbuf;
to_x11.c:  if (win_open (pg, po->outfile, (int) (po->xoff * po->dpi_x / 25.4),
to_x11.c:		(int) (po->yoff * po->dpi_y / 25.4), pb->nb << 3, pb->nr))
to_x11.c:	       po->HP_to_xdots *=2;
to_x11.c:	       po->HP_to_ydots *=2;
to_x11.c:	       po->dpi_x *=2;
to_x11.c:	       po->dpi_y *=2;
to_x11.c:	      po->dpi_x = po->dpi_x/2;
to_x11.c:	      po->dpi_y = po->dpi_y/2;
to_x11.c:	       po->HP_to_xdots = po->HP_to_xdots/2;
to_x11.c:	       po->HP_to_ydots = po->HP_to_ydots/2;
to_x11.c:		free_PicBuf(po->picbuf);
to_x11.c:		po->picbuf=NULL;    
to_x11.c:	      pb=po->picbuf;
